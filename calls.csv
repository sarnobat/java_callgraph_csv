"gr.gousiosg.javacg.stat.MethodVisitor","com.rohidekar.callgraph.common.MyInstruction"
"gr.gousiosg.javacg.stat.MethodVisitor","com.rohidekar.callgraph.common.MyInstruction"
"gr.gousiosg.javacg.stat.MethodVisitor","com.rohidekar.callgraph.common.MyInstruction"
"gr.gousiosg.javacg.stat.MethodVisitor","com.rohidekar.callgraph.common.DeferredSuperMethod"
"gr.gousiosg.javacg.stat.MethodVisitor","java.lang.StringBuilder"
"gr.gousiosg.javacg.stat.MethodVisitor","java.lang.StringBuilder"
"com.rohidekar.callgraph.common.GraphNode","java.lang.IllegalAccessError"
"dnl.utils.text.table.SeparatorPolicy","dnl.utils.text.table.TextTreeTable$TreeTableSeparatorPolicy"
"gr.gousiosg.javacg.stat.ClassVisitor","java.util.HashMap"
"gr.gousiosg.javacg.stat.ClassVisitor","org.apache.bcel.generic.ConstantPoolGen"
"gr.gousiosg.javacg.stat.ClassVisitor","org.apache.bcel.generic.MethodGen"
"gr.gousiosg.javacg.stat.ClassVisitor","com.rohidekar.callgraph.common.MyMethodVisitor"
"gr.gousiosg.javacg.stat.ClassVisitor","java.lang.StringBuilder"
"gr.gousiosg.javacg.stat.ClassVisitor","java.lang.StringBuilder"
"com.rohidekar.callgraph.common.GraphNode","java.lang.IllegalAccessError"
"dnl.utils.text.table.TextTable","dnl.utils.text.table.TextTreeTable$TreeTableSeparatorPolicy"
"dnl.utils.text.table.TextTable","dnl.utils.text.table.TextTreeTable$TreeTableSeparatorPolicy"
"dnl.utils.text.table.TextTable","dnl.utils.text.table.TextTreeTable$TreeTableSeparatorPolicy"
"dnl.utils.text.table.TextTable","dnl.utils.text.table.TextTreeTableRenderer"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.printTrees()","MyTreeModel.<init>()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.printTrees()","TextTree.<init>()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.printTrees()","TextTree.printTree()"
"com.rohidekar.callgraph.common.MyTreeModel.getChild()","GraphNode.getChild()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","MethodGen.getConstantPool()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","MyInstruction.getQualifiedMethodName()"
"MyInstruction.getQualifiedMethodName()","JavaClass.getClassName()"
"MyInstruction.getQualifiedMethodName()","MethodGen.getName()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","MethodGen.getInstructionList()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","InstructionList.getStart()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","InstructionHandle.getInstruction()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","MyMethodVisitor.shouldVisitInstruction()"
"MyMethodVisitor.shouldVisitInstruction()","Instruction.getOpcode()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","Instruction.accept()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","InstructionHandle.getNext()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","MyInstruction.getMethodNameUnqualified()"
"MyInstruction.getMethodNameUnqualified()","MyInstruction.getMethodNameQualified()"
"MyInstruction.getMethodNameUnqualified()","ClassUtils.getShortCanonicalName()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","Relationships.setVisitedMethod()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","Relationships.getMethod()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","JavaClass.getClassName()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","MyInstruction.<init>()"
"MyInstruction.<init>()","ObjectType.getClassName()"
"MyInstruction.<init>()","MyInstruction.getQualifiedMethodName()"
"com.rohidekar.callgraph.common.MyMethodVisitor.<init>()","Relationships.addMethodDefinition()"
"Relationships.addMethodDefinition()","MyInstruction.getMethodNameQualified()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.determinePackageStructure()","Relationships.getPackagesKeySet()"
"Relationships.getPackagesKeySet()","Multimap.keySet()"
"Relationships.getPackagesKeySet()","ImmutableSet.copyOf()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.determinePackageStructure()","GraphNodePackage.<init>()"
"GraphNodePackage.<init>()","GraphNode.<init>()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.determinePackageStructure()","Preconditions.checkNotNull()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.determinePackageStructure()","ClassUtils.getPackageName()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.determinePackageStructure()","GraphNodePackage.addChild()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.determinePackageStructure()","GraphNodePackage.addParent()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.determinePackageStructure()","Relationships.getChildPackagesOf()"
"Relationships.getChildPackagesOf()","Multimap.get()"
"Relationships.getChildPackagesOf()","ImmutableSet.copyOf()"
"com.rohidekar.callgraph.containments.GraphNodeUtils.removeCyclicCalls()","HashMultimap.create()"
"com.rohidekar.callgraph.containments.GraphNodeUtils.removeCyclicCalls()","CycleRemovingTreeVisitor.<init>()"
"com.rohidekar.callgraph.containments.GraphNodeUtils.removeCyclicCalls()","CycleRemovingTreeVisitor.visit()"
"CycleRemovingTreeVisitor.visit()","GraphNode.getSource()"
"CycleRemovingTreeVisitor.visit()","GraphNodeString.<init>()"
"GraphNodeString.<init>()","GraphNode.<init>()"
"CycleRemovingTreeVisitor.visit()","CycleRemovingTreeVisitor.visitNode()"
"CycleRemovingTreeVisitor.visitNode()","GraphNode.getChildren()"
"CycleRemovingTreeVisitor.visitNode()","GraphNode.getSource()"
"CycleRemovingTreeVisitor.visitNode()","GraphNodeString.<init>()"
"CycleRemovingTreeVisitor.visitNode()","GraphNode.addChild()"
"GraphNode.addChild()","GraphNode.getChildren()"
"CycleRemovingTreeVisitor.visitNode()","GraphNodeString.addParent()"
"com.rohidekar.callgraph.containments.GraphNodeUtils.removeCyclicCalls()","MyTreeModel.<init>()"
"com.rohidekar.callgraph.containments.GraphNodeUtils.removeCyclicCalls()","TreeDepthCalculator.getTreeDepth()"
"TreeDepthCalculator.getTreeDepth()","TreeDepthVisitor.<init>()"
"TreeDepthCalculator.getTreeDepth()","TreeDepthVisitor.visit()"
"TreeDepthCalculator.getTreeDepth()","GraphNode.getChildren()"
"TreeDepthCalculator.getTreeDepth()","TreeDepthVisitor.isVisited()"
"com.rohidekar.callgraph.containments.GraphNodeUtils.removeCyclicCalls()","Multimap.put()"
"dnl.utils.text.table.TextTable.<init>()","TextTreeTable.TreeTableSeparatorPolicy.<init>()"
"TextTreeTable.TreeTableSeparatorPolicy.<init>()","SeparatorPolicy.<init>()"
"SeparatorPolicy.<init>()","TextTreeTable.TreeTableSeparatorPolicy.<init>()"
"dnl.utils.text.table.TextTable.<init>()","TextTreeTableRenderer.<init>()"
"TextTreeTableRenderer.<init>()","TextTableRenderer.<init>()"
"TextTableRenderer.<init>()","TextTable.getTableModel()"
"com.rohidekar.callgraph.containments.RelationshipToGraphTransformerContainments.determineContainments()","Relationships.getAllClassNames()"
"Relationships.getAllClassNames()","ImmutableSet.copyOf()"
"com.rohidekar.callgraph.containments.RelationshipToGraphTransformerContainments.determineContainments()","GraphNodeString.<init>()"
"GraphNodeString.<init>()","GraphNode.<init>()"
"com.rohidekar.callgraph.containments.RelationshipToGraphTransformerContainments.determineContainments()","Relationships.getContainedClassNames()"
"Relationships.getContainedClassNames()","Multimap.get()"
"Relationships.getContainedClassNames()","ImmutableSet.copyOf()"
"com.rohidekar.callgraph.containments.RelationshipToGraphTransformerContainments.determineContainments()","GraphNode.addChild()"
"GraphNode.addChild()","GraphNode.getChildren()"
"com.rohidekar.callgraph.containments.RelationshipToGraphTransformerContainments.determineContainments()","GraphNode.addParent()"
"GraphNode.addParent()","GraphNode.getParents()"
"GraphNode.getParents()","GraphNodeInstruction.getParents()"
"com.rohidekar.callgraph.containments.TreePrinterContainments.printTrees()","Multimap.keySet()"
"com.rohidekar.callgraph.containments.TreePrinterContainments.printTrees()","Multimap.get()"
"com.rohidekar.callgraph.containments.TreePrinterContainments.printTrees()","GraphNode.getPackageDepth()"
"GraphNode.getPackageDepth()","Relationships.getPackageDepth()"
"Relationships.getPackageDepth()","ClassUtils.getPackageName()"
"Relationships.getPackageDepth()","StringUtils.countMatches()"
"com.rohidekar.callgraph.containments.TreePrinterContainments.printTrees()","Relationships.getMinPackageDepth()"
"com.rohidekar.callgraph.containments.TreePrinterContainments.printTrees()","TextTree.<init>()"
"com.rohidekar.callgraph.containments.TreePrinterContainments.printTrees()","TreePrinterContainments.printRelationships()"
"com.rohidekar.callgraph.common.RootFinder.findRootJavaClasses()","RootsVisitor.<init>()"
"com.rohidekar.callgraph.common.RootFinder.findRootJavaClasses()","RootFinder.getRoots()"
"RootFinder.getRoots()","RootsVisitor.visited()"
"RootFinder.getRoots()","RootsVisitor.addVisited()"
"RootFinder.getRoots()","GraphNode.getParents()"
"GraphNode.getParents()","GraphNodeInstruction.getParents()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.findRoots()","RootsVisitor.<init>()"
"com.rohidekar.callgraph.packages.RelationshipToGraphTransformerPackages.findRoots()","RootFinder.getRoots()"
"RootFinder.getRoots()","RootsVisitor.visited()"
"RootFinder.getRoots()","RootsVisitor.addVisited()"
"RootFinder.getRoots()","GraphNode.getParents()"
"GraphNode.getParents()","GraphNodeInstruction.getParents()"
"dnl.utils.text.table.TextTable.printTable()","TextTableRenderer.<init>()"
"TextTableRenderer.<init>()","TextTable.getTableModel()"
"dnl.utils.text.table.TextTable.printTable()","TextTableRenderer.render()"
"TextTableRenderer.render()","TextTable.getTableModel()"
"TextTableRenderer.render()","StringUtils.repeat()"
"TextTableRenderer.render()","TextTableRenderer.resolveColumnLengths()"
"TextTableRenderer.render()","TextTableRenderer.resolveSeparator()"
"TextTableRenderer.resolveSeparator()","StringUtils.repeat()"
"TextTableRenderer.render()","TextTableRenderer.resolveFormats()"
"TextTableRenderer.render()","TextTableRenderer.indentAccordingToNumbering()"
"TextTableRenderer.render()","TextTableRenderer.addSeparatorIfNeeded()"
"TextTableRenderer.addSeparatorIfNeeded()","TextTable.hasSeparatorAt()"
"TextTable.hasSeparatorAt()","SeparatorPolicy.hasSeparatorAt()"
"TextTableRenderer.addSeparatorIfNeeded()","TextTableModel.addSeparatorAt()"
"TextTableRenderer.addSeparatorIfNeeded()","TextTableRenderer.indentAccordingToNumbering()"
"TextTableRenderer.render()","TextTableRenderer.modelAllowsNumberingAt()"
"TextTableRenderer.modelAllowsNumberingAt()","TextTableModel.allowNumberingAt()"
"TextTableRenderer.render()","TextTableRenderer.printValue()"
"com.rohidekar.callgraph.common.MyMethodVisitor.addMethodCallRelationship()","MyInstruction.<init>()"
"MyInstruction.<init>()","ObjectType.getClassName()"
"MyInstruction.<init>()","MyInstruction.getQualifiedMethodName()"
"MyInstruction.getQualifiedMethodName()","JavaClass.getClassName()"
"MyInstruction.getQualifiedMethodName()","MethodGen.getName()"
"com.rohidekar.callgraph.common.MyMethodVisitor.addMethodCallRelationship()","MyInstruction.printInstruction()"
"MyInstruction.printInstruction()","MyInstruction.getMethodNameUnqualified()"
"MyInstruction.getMethodNameUnqualified()","MyInstruction.getMethodNameQualified()"
"MyInstruction.getMethodNameUnqualified()","ClassUtils.getShortCanonicalName()"
"MyInstruction.printInstruction()","MyInstruction.getClassNameQualified()"
"MyInstruction.getClassNameQualified()","ClassUtils.getPackageCanonicalName()"
"MyInstruction.printInstruction()","ClassUtils.getShortCanonicalName()"
"MyInstruction.printInstruction()","MyInstruction.getMethodNameQualified()"
"com.rohidekar.callgraph.common.MyMethodVisitor.addMethodCallRelationship()","Relationships.addMethodCall()"
"Relationships.addMethodCall()","Multimap.put()"
"Relationships.addMethodCall()","Relationships.isVisitedMethod()"
"Relationships.isVisitedMethod()","Relationships.addUnvisitedMethod()"
"Relationships.addMethodCall()","Relationships.addUnvisitedMethod()"
"com.rohidekar.callgraph.common.MyMethodVisitor.addMethodCallRelationship()","Relationships.getMethod()"
"com.rohidekar.callgraph.common.MyMethodVisitor.addMethodCallRelationship()","ObjectType.getClassName()"
"com.rohidekar.callgraph.common.MyMethodVisitor.addMethodCallRelationship()","Relationships.addMethodDefinition()"
"Relationships.addMethodDefinition()","MyInstruction.getMethodNameQualified()"
"com.rohidekar.callgraph.common.MyMethodVisitor.addMethodCallRelationship()","MyMethodVisitor.linkMethodToSuperclassMethod()"
"MyMethodVisitor.linkMethodToSuperclassMethod()","Relationships.getParentClassesAndInterfaces()"
"Relationships.getParentClassesAndInterfaces()","JavaClass.getInterfaceNames()"
"Relationships.getParentClassesAndInterfaces()","ImmutableMap.get()"
"Relationships.getParentClassesAndInterfaces()","Relationships.deferParentContainment()"
"Relationships.deferParentContainment()","JavaClass.getClassName()"
"Relationships.deferParentContainment()","DeferredParentContainment.<init>()"
"DeferredParentContainment.<init>()","DeferredParentContainment.setParentClassName()"
"DeferredParentContainment.<init>()","DeferredParentContainment.setChildClass()"
"Relationships.getParentClassesAndInterfaces()","JavaClass.getSuperclassName()"
"Relationships.getParentClassesAndInterfaces()","JavaClass.getClassName()"
"Relationships.getParentClassesAndInterfaces()","ImmutableSet.copyOf()"
"MyMethodVisitor.linkMethodToSuperclassMethod()","MyMethodVisitor.getInstruction()"
"MyMethodVisitor.getInstruction()","JavaClass.getClassName()"
"MyMethodVisitor.getInstruction()","MyInstruction.getQualifiedMethodName()"
"MyMethodVisitor.getInstruction()","Relationships.getMethod()"
"MyMethodVisitor.linkMethodToSuperclassMethod()","DeferredSuperMethod.<init>()"
"MyMethodVisitor.linkMethodToSuperclassMethod()","Relationships.deferSuperMethodRelationshipCapture()"
"MyMethodVisitor.linkMethodToSuperclassMethod()","MyInstruction.getMethodNameQualified()"
"MyMethodVisitor.linkMethodToSuperclassMethod()","Relationships.addMethodCall()"
"MyMethodVisitor.linkMethodToSuperclassMethod()","MyInstruction.getClassNameQualified()"
"MyMethodVisitor.linkMethodToSuperclassMethod()","Relationships.addContainmentRelationshipStringOnly()"
"Relationships.addContainmentRelationshipStringOnly()","Multimap.put()"
"com.rohidekar.callgraph.Main.printGraphs()","Relationships.<init>()"
"Relationships.<init>()","LinkedHashMultimap.create()"
"Relationships.<init>()","JavaClassGenerator.getJavaClassesFromResource()"
"JavaClassGenerator.getJavaClassesFromResource()","ClassParser.<init>()"
"JavaClassGenerator.getJavaClassesFromResource()","ClassParser.parse()"
"JavaClassGenerator.getJavaClassesFromResource()","JavaClass.getClassName()"
"JavaClassGenerator.getJavaClassesFromResource()","FileUtils.iterateFiles()"
"JavaClassGenerator.getJavaClassesFromResource()","IteratorUtils.toList()"
"JavaClassGenerator.getJavaClassesFromResource()","Preconditions.checkNotNull()"
"Relationships.<init>()","ImmutableMap.copyOf()"
"Relationships.<init>()","ImmutableMap.values()"
"Relationships.<init>()","ImmutableCollection.iterator()"
"Relationships.<init>()","Relationships.visitJavaClass()"
"Relationships.visitJavaClass()","MyClassVisitor.<init>()"
"MyClassVisitor.<init>()","Relationships.addPackageOf()"
"Relationships.addPackageOf()","JavaClass.getPackageName()"
"Relationships.addPackageOf()","ClassUtils.getPackageName()"
"Relationships.addPackageOf()","Multimap.put()"
"Relationships.visitJavaClass()","MyClassVisitor.visitJavaClass()"
"MyClassVisitor.visitJavaClass()","MyClassVisitor.isVisited()"
"MyClassVisitor.visitJavaClass()","MyClassVisitor.setVisited()"
"MyClassVisitor.setVisited()","JavaClass.getClassName()"
"MyClassVisitor.visitJavaClass()","JavaClass.getClassName()"
"MyClassVisitor.visitJavaClass()","Ignorer.shouldIgnore()"
"Ignorer.shouldIgnore()","JavaClass.getClassName()"
"MyClassVisitor.visitJavaClass()","Relationships.addPackageOf()"
"MyClassVisitor.visitJavaClass()","Relationships.updateMinPackageDepth()"
"Relationships.updateMinPackageDepth()","JavaClass.getClassName()"
"Relationships.updateMinPackageDepth()","Relationships.getPackageDepth()"
"Relationships.getPackageDepth()","ClassUtils.getPackageName()"
"Relationships.getPackageDepth()","StringUtils.countMatches()"
"MyClassVisitor.visitJavaClass()","MyClassVisitor.getInterfacesAndSuperClasses()"
"MyClassVisitor.getInterfacesAndSuperClasses()","JavaClass.getSuperclassName()"
"MyClassVisitor.getInterfacesAndSuperClasses()","JavaClass.getInterfaceNames()"
"MyClassVisitor.getInterfacesAndSuperClasses()","Lists.asList()"
"MyClassVisitor.visitJavaClass()","Relationships.getClassDef()"
"Relationships.getClassDef()","Repository.lookupClass()"
"Relationships.getClassDef()","ImmutableMap.get()"
"MyClassVisitor.visitJavaClass()","Relationships.deferParentContainment()"
"Relationships.deferParentContainment()","JavaClass.getClassName()"
"Relationships.deferParentContainment()","DeferredParentContainment.<init>()"
"DeferredParentContainment.<init>()","DeferredParentContainment.setParentClassName()"
"DeferredParentContainment.<init>()","DeferredParentContainment.setChildClass()"
"MyClassVisitor.visitJavaClass()","Relationships.addContainmentRelationshipStringOnly()"
"Relationships.addContainmentRelationshipStringOnly()","Multimap.put()"
"MyClassVisitor.visitJavaClass()","Relationships.addContainmentRelationship()"
"Relationships.addContainmentRelationship()","Ignorer.shouldIgnore()"
"Relationships.addContainmentRelationship()","JavaClass.getClassName()"
"Relationships.addContainmentRelationship()","Multimap.put()"
"Relationships.addContainmentRelationship()","Relationships.addContainmentRelationshipStringOnly()"
"MyClassVisitor.visitJavaClass()","JavaClass.getMethods()"
"MyClassVisitor.visitJavaClass()","Method.accept()"
"MyClassVisitor.visitJavaClass()","JavaClass.getFields()"
"MyClassVisitor.visitJavaClass()","Field.accept()"
"Relationships.<init>()","DeferredRelationships.handleDeferredRelationships()"
"DeferredRelationships.handleDeferredRelationships()","Relationships.getDeferredParentContainments()"
"Relationships.getDeferredParentContainments()","ImmutableSet.copyOf()"
"DeferredRelationships.handleDeferredRelationships()","DeferredParentContainment.getParentClassName()"
"DeferredRelationships.handleDeferredRelationships()","Relationships.getClassDef()"
"DeferredRelationships.handleDeferredRelationships()","DeferredRelationships.handleDeferredParentContainment()"
"DeferredRelationships.handleDeferredParentContainment()","DeferredParentContainment.getParentClassName()"
"DeferredRelationships.handleDeferredParentContainment()","Repository.lookupClass()"
"DeferredRelationships.handleDeferredParentContainment()","Ignorer.shouldIgnore()"
"DeferredRelationships.handleDeferredParentContainment()","DeferredParentContainment.getChildClass()"
"DeferredRelationships.handleDeferredParentContainment()","JavaClass.getClassName()"
"DeferredRelationships.handleDeferredParentContainment()","MyClassVisitor.addContainmentRelationship()"
"MyClassVisitor.addContainmentRelationship()","Ignorer.shouldIgnore()"
"MyClassVisitor.addContainmentRelationship()","Repository.lookupClass()"
"MyClassVisitor.addContainmentRelationship()","Relationships.deferContainmentVisit()"
"Relationships.deferContainmentVisit()","DeferredChildContainment.<init>()"
"MyClassVisitor.addContainmentRelationship()","Relationships.getClassDef()"
"MyClassVisitor.addContainmentRelationship()","JavaClass.getClassName()"
"MyClassVisitor.addContainmentRelationship()","Relationships.addContainmentRelationship()"
"DeferredRelationships.handleDeferredRelationships()","Relationships.getDeferredChildContainment()"
"Relationships.getDeferredChildContainment()","ImmutableSet.copyOf()"
"DeferredRelationships.handleDeferredRelationships()","DeferredChildContainment.getParentClass()"
"DeferredRelationships.handleDeferredRelationships()","DeferredChildContainment.getClassQualifiedName()"
"DeferredRelationships.handleDeferredRelationships()","MyClassVisitor.addContainmentRelationship()"
"DeferredRelationships.handleDeferredRelationships()","Relationships.getDeferSuperMethodRelationships()"
"Relationships.getDeferSuperMethodRelationships()","ImmutableSet.copyOf()"
"DeferredRelationships.handleDeferredRelationships()","DeferredRelationships.handleDeferredSuperMethod()"
"DeferredRelationships.handleDeferredSuperMethod()","DeferredSuperMethod.getparentClassOrInterface()"
"DeferredRelationships.handleDeferredSuperMethod()","DeferredSuperMethod.getunqualifiedMethodName()"
"DeferredRelationships.handleDeferredSuperMethod()","MyMethodVisitor.getInstruction()"
"MyMethodVisitor.getInstruction()","JavaClass.getClassName()"
"MyMethodVisitor.getInstruction()","MyInstruction.getQualifiedMethodName()"
"MyInstruction.getQualifiedMethodName()","JavaClass.getClassName()"
"MyInstruction.getQualifiedMethodName()","MethodGen.getName()"
"MyMethodVisitor.getInstruction()","Relationships.getMethod()"
"DeferredRelationships.handleDeferredSuperMethod()","MyInstruction.getMethodNameQualified()"
"DeferredRelationships.handleDeferredSuperMethod()","DeferredSuperMethod.gettarget()"
"DeferredRelationships.handleDeferredSuperMethod()","Relationships.methodCallExists()"
"Relationships.methodCallExists()","Multimap.get()"
"Relationships.methodCallExists()","MyInstruction.getMethodNameQualified()"
"DeferredRelationships.handleDeferredSuperMethod()","Relationships.addMethodCall()"
"Relationships.addMethodCall()","Multimap.put()"
"Relationships.addMethodCall()","Relationships.isVisitedMethod()"
"Relationships.isVisitedMethod()","Relationships.addUnvisitedMethod()"
"Relationships.addMethodCall()","Relationships.addUnvisitedMethod()"
"com.rohidekar.callgraph.Main.printGraphs()","Relationships.validate()"
"Relationships.validate()","Multimap.keySet()"
"com.rohidekar.callgraph.Main.printGraphs()","RelationshipToGraphTransformerCallHierarchy.printCallGraph()"
"RelationshipToGraphTransformerCallHierarchy.printCallGraph()","RelationshipToGraphTransformerCallHierarchy.determineCallHierarchy()"
"RelationshipToGraphTransformerCallHierarchy.determineCallHierarchy()","Relationships.validate()"
"RelationshipToGraphTransformerCallHierarchy.determineCallHierarchy()","Relationships.getAllMethodCallers()"
"Relationships.getAllMethodCallers()","Multimap.keySet()"
"Relationships.getAllMethodCallers()","ImmutableSet.copyOf()"
"RelationshipToGraphTransformerCallHierarchy.determineCallHierarchy()","Ignorer.shouldIgnore()"
"RelationshipToGraphTransformerCallHierarchy.determineCallHierarchy()","Relationships.getMethod()"
"RelationshipToGraphTransformerCallHierarchy.determineCallHierarchy()","GraphNodeInstruction.<init>()"
"GraphNodeInstruction.<init>()","GraphNode.<init>()"
"RelationshipToGraphTransformerCallHierarchy.determineCallHierarchy()","Relationships.getCalledMethods()"
"Relationships.getCalledMethods()","Multimap.get()"
"Relationships.getCalledMethods()","ImmutableSet.copyOf()"
"RelationshipToGraphTransformerCallHierarchy.determineCallHierarchy()","MyInstruction.getMethodNameQualified()"
"RelationshipToGraphTransformerCallHierarchy.determineCallHierarchy()","GraphNodeInstruction.addChild()"
"RelationshipToGraphTransformerCallHierarchy.determineCallHierarchy()","GraphNodeInstruction.addParent()"
"RelationshipToGraphTransformerCallHierarchy.printCallGraph()","Relationships.validate()"
"RelationshipToGraphTransformerCallHierarchy.printCallGraph()","RelationshipToGraphTransformerCallHierarchy.findRootCallers()"
"RelationshipToGraphTransformerCallHierarchy.findRootCallers()","RootsVisitor.<init>()"
"RelationshipToGraphTransformerCallHierarchy.findRootCallers()","RootFinder.getRoots()"
"RootFinder.getRoots()","RootsVisitor.visited()"
"RootFinder.getRoots()","RootsVisitor.addVisited()"
"RootFinder.getRoots()","GraphNode.getParents()"
"GraphNode.getParents()","GraphNodeInstruction.getParents()"
"RelationshipToGraphTransformerCallHierarchy.printCallGraph()","TreePrinterCalls.printTrees()"
"TreePrinterCalls.printTrees()","LinkedHashMultimap.create()"
"TreePrinterCalls.printTrees()","MyTreeModel.<init>()"
"TreePrinterCalls.printTrees()","TreeDepthCalculator.getTreeDepth()"
"TreeDepthCalculator.getTreeDepth()","TreeDepthVisitor.<init>()"
"TreeDepthCalculator.getTreeDepth()","TreeDepthVisitor.visit()"
"TreeDepthCalculator.getTreeDepth()","GraphNode.getChildren()"
"TreeDepthCalculator.getTreeDepth()","TreeDepthVisitor.isVisited()"
"TreePrinterCalls.printTrees()","GraphNode.getPackageDepth()"
"GraphNode.getPackageDepth()","Relationships.getPackageDepth()"
"TreePrinterCalls.printTrees()","Relationships.getMinPackageDepth()"
"TreePrinterCalls.printTrees()","Multimap.put()"
"TreePrinterCalls.printTrees()","Multimap.get()"
